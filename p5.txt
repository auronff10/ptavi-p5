 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:

 ** ¿Cuántos paquetes componen la captura?

954

 ** ¿Cuánto tiempo dura la captura?

56.15 segundos aproximadamente.

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

192.168.1.34, es una IP privada, dado que el rango de IPs privadas va de 192.168.0.0 a 192.168.255.255 (la llamada clase C)


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.

 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?

UDP es bastante mayor, si que es consistente ya que al ser una transmición de datos en tiempo real, no nos interesaría TCP.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?

RTP, IP, SIP,RTCP,ICMP,ARP, STUN y HTTP


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.

 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

Utilizando la opción impulse para dibujar el gráfico de SIP, diría que en los segundos 7, 14.5 , 16.3, 38.2, 39 y 55.7 tienen lugar los envios.

 ** Y los paquetes con RTP, ¿cuándo se envían?

Una vez inicializada la conexion SIP, aproximadamente entre los segundos 17 y 38.2 se envían los paquetes RTP.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.

 ** ¿Qué servicio es el utilizado en estas tramas?

El servicio DNS (Domain Name System) para obtener la IP del servidor ekiga.net

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

Porque DNS sigue el método de resolución inversa de  un dirección IP (resolución DNS hacia adelante), se usa la entrada in-addr.arpa algo propio de IPv4.

6. A continuación, hay más de una docena de tramas TCP/HTTP.

 ** ¿Podrías decir la URL que se está pidiendo?

http://ekiga.net/ip/

 ** ¿Qué user agent (UA) la está pidiendo?

Ekiga

 ** ¿Qué devuelve el servidor?

La direccion IP 83.36.48.212, que es la IP pública correspondiente a la IP privada 192.168.1.34

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

Al acceder a la url, podemos visionar la IP pública nuestro ordenador. El servidor por tanto le esta dando la información de su IP pública.  

7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.

 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

Porque es necesario utilizar STUN cuando hay una máquina dentro de una NAT que desea saber su IP pública como es este caso. En la WIkipedia además se especifica
que es complementario a SIP y le permite a la máquina saber el tipo de NAT en que se encuentra y el puerto de Internet asociado con su puerto local.

 ** ¿Estamos tras un NAT?

Sí, la IP 192.168.1.34 ya nos indicaba que estamos dentro de una red local, además la necesidad de usar STUN nos lo vuelve a confirmar.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.

 ** ¿Qué dirección IP tiene el servidor Registrar?

86.64.162.35

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

5060

 ** ¿Qué método SIP utiliza el UA para registrarse?

Utiliza el método REGISTER para registrarse.

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

INVITE,ACK,BYE,CANCEL, OPTIONS, PRACK, SUSCRIBE, NOTIFY, PUBLISH, INFO,REFER, MESSAGE y UPDATE son los métodos existentes. Si bien este caso, solo se permiten algunos de ellos, el campo allow nos los indica.
Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:

 ** ¿Se registra con éxito en el primer intento?

No, recibe una respueta 401 Unauthorized.

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?

Como he dicho antes, mirando la trama de respuesta de SIP, la 50, que nos da el mensaje 401 de no autorizado.

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

El primer request de REGISTER mide 523 bytes mientras que el segundo mide 712. Esto se debe a que la segunda request de REGISTER contiene el campo Authorization en la cabecera lo que le permite registrarse.

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

3600 segundos.

10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.

 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

Si, como se puede ver en el campo from, Gregorio Robles con dirección sip grex@ekiga.net.

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

Contiene la información de la sesión que se desea establecer, en protocolo SDP.

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

No, ya que se recibe una respuesta SIP en la siguiente trama indicando 407  Proxy Authentication error

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

El segundo INVITE es más grande (1181 bytes en lugar de 744 del primero) y esto se debe a que contiene el campo Proxy Authorization  en la cabecera necesario para establecer la conexión.

11. Una vez conectado, estudia el intercambio de tramas.

 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

Se utiliza RTP principalmente que sirve para la tansmición de texto, audio o video en tiempo real, h.261 que va sobre RTP permite la compresión de video, RTCP que sirve para mejorar la calidad de servicio  RTP y dar información de control de RTP y finalmente ARP que sirve para saber la dirección MAC de una máquina que tiene una IP determinada.

 ** ¿Cuál es el tamaño de paquete de los mismos?

Los paquetes RTP en si miden 180 bytes

 ** ¿Se utilizan bits de padding?

No (Padding False)

 ** ¿Cuál es la periodicidad de los paquetes que se envían?

Aproximadamente cada 0.02 segundos, al menos al principio de la comunicación, conforme pasa al tiempo es cada vez más eficiente la comunicación y se evnían más rápido

 ** ¿Cuántos bits/segundo estamos enviando?

Al principio al menos, el bitrate sería 72000 bits por segundo.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.

 ** ¿Cuántos flujos hay? ¿por qué?

Dos flujos, podemos observar que hay dos fuentes, una de video en el puerto 5014 con codificación h261 y otra de audio en el puerto 5010 codificada en g.711

 ** ¿Cuántos paquetes se pierden?

Ninguno, Telephony indica package loss de 0.0%

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

1290.48, representa el el valor máximo existente entre el envio de los paquetes, es decir, es el intevalo de tiempo grande entre el envio de dos paquetes RTP consecutivos y está expresado en milisegundos.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

En cuanto al flujo de audio el jiiter máximo es 119.64 y el medio es de 42.50. Mientras que el jitter máximo de video es 183.10 y su jiiter medio es de 153.24 (Todos estos tiempos expresados en milisegundos).
 Sí, se trata de una conversación de calidad, ya que un jitter medio inferior a los 100 ms se considera aceptable para una conversación, y el jitter medio del audio es de 42.50.

13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.

 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

Tiene valor 0.0 en ambos parámetros.

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

Sí, el número de sequencia del paquete, y el marker del paquete RTP que es TRUE nos indica que se trata del primer paquete RTP de la comunicación.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

Hasta el paquete 247 que tiene un jitter de 38.82

 ** ¿A qué se debe el cambio tan brusco del jitter?

A un valor muy grande de la delta (554.74 ms), lo cual es un cambio abrupto en la velocidad de transmición de los paquetes.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

Sí, ya que el jitter varía en función de la delta que nos dice la diferencia de tiempo entre el envio de un paquete y el anterior. Así que el paquete llegará mucho más tarde comparado con los enviados anteriormente.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

Dado que la fórmula que se una para calcular el jitter es J(i) = J(i-1) + (|D(i-1,i)| - J(i-1))/16 , donde D(i-1,i) es la diferencia de tiempo de llegada entre un paquete y su aterior, entonces la diferencia |D(i-1,i)| = J(i) + J(i-1))/16 - J(i-1) . Donde J(i-1) es el jitter del paquete anterior.

14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.

 ** ¿Cuánto dura la conversación?

24 segundos aproximadamente. Empieza en el segundo 14,42 y termina en el 39,22.

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

El SSRC de audio es 0XBF4AFD37 y el de video es 0x43306582. Hay dos, ya que tenemos dos fuentes distintas, audio y video. No hay CSRCs ya que no hay otras fuentes, no pasan por otros mezcladores los flujos de datos. 

15. Identifica la trama donde se finaliza la conversación.

 ** ¿Qué método SIP se utiliza?

BYE

 ** ¿En qué trama(s)?

En las tramas 924,925, 927 y 933 se envian los BYE request. Estos son respondidos con 200 OK en las tramas de 938 a 941.

 ** ¿Por qué crees que se envía varias veces?

 Debido a que UDP es un protocolo no fiable y podrían perderse estos BYE requests. Como indica el RFC de SIP: "For UDP, reliability is achieved using retransmission", así que usamos retansmición para tener fiabilidad.

16. Finalmente, se cierra la aplicación de VozIP.

 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?

Porque el usuario (user agent) quiere que se le borre de la lista del servidor ( Esto se indica mediante el valor 0 en el parámetro Expires)

 ** ¿En qué trama sucede esto?

Entre las tramas 950 y 953, el primer REGISTER se envió sin la información de authorization por lo que la máquina del usuario tuvo que reenviar el request con dicha información hasta obtener el 200 OK

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

El valor del expires, en este caso e es 0 y el del principio de la sesión es 3600.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 
** ¿Es necesario el uso de DNS y STUN? ¿Por qué?

No, porque usamos una IP pública para conectarnos y no es necesario.

 ** ¿Son diferentes el registro y la descripción de la sesión?

Si, en este caso el register tiene en su campo allow más comandos como PING o PRACK, por  lo demás es bastante similar al de la primera captura. En cuanto a la descripción de la sesión podemos obsevar que en la nueva captura se conocen menos protocolos de audio (3 menos respecto al de la primera captura) pero se conocen bastante más de video (6 más), también se utilizan puertos distintos, como es de esperar.

18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:

 ** ¿Cuántos flujos tenemos?

Tenemos dos flujos de audio codificandos en g711 , uno desde nosotros, emisores de la llamada y otro desde el receptor de la llamada.

 ** ¿Cuál es su periodicidad?

0.02 segundos aproximadamente, pero luego va cada vez más rápido.

 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?

Para el flujo de el emisor de la llamada, nosotros: La delta máxima es 25.29 ms, el jitter medio es 0.27 y el jitter máximo es 1.

Para el receptor de la llamada: la delta máxima es 25.23, el jitter medio es 0.41 y el jitter máximo es 1.01. 
 
** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.

Sí, con la opción Telephony, luego elegimos VoIP calls, Play y Decode. Si ponemos un buffer para el jitter con valor 1 ms por ejemplo, la canción escuchada tiene saltos y baja mucho de calidad respecto a que si utilizamos el buffer por defecto 500 ms.

 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?

Ofrece un servicio de reproducción de canciones todo el tiempo "Music on hold"

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
